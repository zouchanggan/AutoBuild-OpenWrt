#=================================================
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: eSirPlayground
# Youtube Channel: https://goo.gl/fvkdwm 
#=================================================

name: Build_OpenWrt-Demo

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
        
  #push:
  #  branches: 
  #    - master

  schedule:
    - cron: 0 0 * * 5
  
  #watch:
  #  types: [started]
  
env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  SCRIPT_SH: script.sh
  CONFIG_SH: config.sh
  UPLOAD_FIRMWARE: true
  TZ: Asia/Shanghai

jobs:
  build_openwrt:
    name: Build OpenWrt and release
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
        sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
        sudo -E apt update -y
        sudo -E apt full-upgrade -y
        sudo -E apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
        sudo timedatectl set-timezone "$TZ"
        df -h
    - name: Clone source code
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        useVersionInfo=$(git show -s --date=short --format="date: %cd<br/>commit: %s<br/>commit hash: %H")
        echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV
        echo "DATE=$(date "+%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "tag_name=$(date +%Y%m%d)" >> $GITHUB_ENV
    - name: Update feeds
      run: |
        chmod +x $SCRIPT_SH
        ./$SCRIPT_SH
        cd openwrt
        #sed -i 's/#src-git helloworld/src-git helloworld/g' ./feeds.conf.default
        ./scripts/feeds update -a
    - name: Install feeds
      run: |
        cd openwrt
        ./scripts/feeds install -a
    - name: Load custom configuration
      run: |
        chmod +x $CONFIG_SH
        ./$CONFIG_SH
    - name: Download package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec rm -f {} \;
    - name: Compile the firmware
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 V=s
        echo "======================="
        echo "Space usage:"
        echo "======================="
        df -h
        echo "======================="
        du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
        du -h --max-depth=1 ./build_dir
        du -h --max-depth=1 ./bin
        echo "::set-output name=status::success"
    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages feeds.buildinfo openwrt-x86-64-generic-kernel.bin openwrt-x86-64-generic-squashfs-rootfs.img openwrt-x86-64-generic.manifest sha256sums version.buildinfo
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"
    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware
        path: ${{ env.FIRMWARE }}

    - name: Create release
      uses: ncipollo/release-action@v1
      with:
        name: ${{ env.DATE }} ❤️ | OpenWrt 自动编译
        allowUpdates: true
        tag: ${{ env.tag_name }}
        commit: main
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          编译使用版本:
          ${{ env.useVersionInfo }}
        artifacts: "${{ env.FIRMWARE }}/*"

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
